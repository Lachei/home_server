cmake_minimum_required(VERSION 3.15.0 FATAL_ERROR)
project(home_server)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)


file(GLOB SRC "src/*")
if(WIN32)
    add_compile_definitions(_WIN32_WINNT=0x0601)
else()
    add_compile_options(-fpermissive)
endif()
add_executable(home_server ${SRC})
target_compile_definitions(home_server PUBLIC CROW_ENABLE_SSL BOOST_NETWORK_ENABLE_HTTPS)

if (${CMAKE_CXX_COMPILER} STREQUAL "/usr/bin/aarch64-linux-gnu-g++")
    message("Setting cpu capabilities for the raspberry pi")
    set(CMAKE_CXX_FLAGS "-mtune=cortex-a76 ${CMAKE_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "-mtune=cortex-a76 ${CMAKE_C_FLAGS}")
    message("c flags: ${CMAKE_C_FLAGS}")
    set(CMAKE_SYSTEM_PROCESSOR "aarch64")

    include(FetchContent)
    set(FETCHCONTENT_QUIET FALSE)

    set(CMAKE_VERBOSE_MAKEFILE TRUE)
    FetchContent_Declare(openssl
        GIT_REPOSITORY https://github.com/janbar/openssl-cmake.git
        GIT_PROGRESS TRUE
    )
    option(WITH_APPS "" OFF)
    FetchContent_MakeAvailable(openssl)
    target_link_libraries(home_server ssl)
    include_directories(${openssl_BINARY_DIR}/include)
    set(CMAKE_VERBOSE_MAKEFILE FALSE)
    # add_subdirectory(${openssl_SOURCE_DIR})
    # set(additional_lib_opts "-static \"${openssl_BINARY_DIR}/ssl/libssl.a\" \"${openssl_BINARY_DIR}/crypto/libcrypto.a\"")

    # boost is added as submodule to be compiled correctly for the platform
    function (fetch_boost_component component)
        FetchContent_Declare(boost_${component}
            GIT_REPOSITORY https://github.com/boostorg/${component}.git
            GIT_TAG boost-1.84.0
            GIT_PROGRESS TRUE
        )
        FetchContent_MakeAvailable(boost_${component})
        target_link_libraries(home_server boost_${component})
        include_directories(${boost_${component}_SOURCE_DIR}/include)
    endfunction()
    fetch_boost_component(align)
    fetch_boost_component(assert)
    fetch_boost_component(config)
    fetch_boost_component(context)
    fetch_boost_component(coroutine)
    fetch_boost_component(date_time)
    fetch_boost_component(system)
    fetch_boost_component(throw_exception)
    fetch_boost_component(core)
    fetch_boost_component(static_assert)
    fetch_boost_component(mp11)
    fetch_boost_component(pool)
    fetch_boost_component(predef)
    fetch_boost_component(smart_ptr)
    fetch_boost_component(exception)
    fetch_boost_component(move)
    fetch_boost_component(type_traits)
    fetch_boost_component(utility)
    fetch_boost_component(algorithm)
    fetch_boost_component(io)
    fetch_boost_component(lexical_cast)
    fetch_boost_component(numeric_conversion)
    fetch_boost_component(range)
    fetch_boost_component(tokenizer)
    fetch_boost_component(winapi)
    fetch_boost_component(variant2)
    fetch_boost_component(integer)
    fetch_boost_component(tuple)
    fetch_boost_component(preprocessor)
    fetch_boost_component(array)
    fetch_boost_component(bind)
    fetch_boost_component(concept_check)
    fetch_boost_component(function)
    fetch_boost_component(iterator)
    fetch_boost_component(mpl)
    fetch_boost_component(regex)
    fetch_boost_component(unordered)
    fetch_boost_component(container)
    fetch_boost_component(conversion)
    fetch_boost_component(container_hash)
    fetch_boost_component(detail)
    fetch_boost_component(optional)
    fetch_boost_component(function_types)
    fetch_boost_component(fusion)
    fetch_boost_component(intrusive)
    fetch_boost_component(describe)
    fetch_boost_component(typeof)
    fetch_boost_component(functional)
    fetch_boost_component(asio)
else()
    find_package(Boost REQUIRED)
    include_directories(${Boost_INCLUDE_DIR})
    # find_package(OpenSSL REQUIRED)
    # set(additional_lib_opts OpenSSL::SSL)
    target_link_libraries(home_server PRIVATE OpenSSL::SSL ${Boost_LIBRARIES})
endif()

include(CTest)
add_subdirectory(tests)